// <auto-generated />
using System;
using GlobeChat.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GlobeChat.Migrations
{
    [DbContext(typeof(GlobeChatContext))]
    [Migration("20181213133913_AddedAvatar")]
    partial class AddedAvatar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GlobeChat.Models.ActivationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivationCodes");
                });

            modelBuilder.Entity("GlobeChat.Models.Avatar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserId");

                    b.Property<string>("image");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Avatar");
                });

            modelBuilder.Entity("GlobeChat.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChannelName");

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("GlobeChat.Models.Connection", b =>
                {
                    b.Property<string>("connectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("id");

                    b.Property<DateTime>("lastSeen");

                    b.HasKey("connectionId");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("GlobeChat.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status");

                    b.Property<string>("hash");

                    b.Property<int?>("receiverId");

                    b.Property<int?>("senderId");

                    b.HasKey("Id");

                    b.HasIndex("receiverId");

                    b.HasIndex("senderId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("GlobeChat.Models.DbLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.ToTable("DbLog");
                });

            modelBuilder.Entity("GlobeChat.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ChannelId1");

                    b.Property<string>("Crypto");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<bool>("IsGuest");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Salt");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ChannelId1");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GlobeChat.Models.ActivationCode", b =>
                {
                    b.HasOne("GlobeChat.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GlobeChat.Models.Avatar", b =>
                {
                    b.HasOne("GlobeChat.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GlobeChat.Models.Connection", b =>
                {
                    b.HasOne("GlobeChat.Models.User", "User")
                        .WithOne("ConnectionId")
                        .HasForeignKey("GlobeChat.Models.Connection", "id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlobeChat.Models.Conversation", b =>
                {
                    b.HasOne("GlobeChat.Models.User", "receiver")
                        .WithMany()
                        .HasForeignKey("receiverId");

                    b.HasOne("GlobeChat.Models.User", "sender")
                        .WithMany()
                        .HasForeignKey("senderId");
                });

            modelBuilder.Entity("GlobeChat.Models.User", b =>
                {
                    b.HasOne("GlobeChat.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("GlobeChat.Models.Channel")
                        .WithMany("Users")
                        .HasForeignKey("ChannelId1");
                });
#pragma warning restore 612, 618
        }
    }
}
